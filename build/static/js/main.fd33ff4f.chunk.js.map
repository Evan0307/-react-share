{"version":3,"sources":["demo1.jsx","demo2.jsx","demo3.jsx","demo4.jsx","demo5.jsx","demo6.jsx","child1Demo7.jsx","child2Demo7.jsx","demo7.jsx","demo8.jsx","demo9.jsx","demo10.jsx","App.js","reportWebVitals.js","index.js"],"names":["FunctionDemo1","memo","console","log","ChildDemo1","Component","ClassDemo1","state","name","handleClick","setState","this","onClick","Child2Demo2","someData","Immutable","fromJS","set","nextProps","nextState","is","ParentClassDemo2","renderCntMap","Child1Demo3","React","otherName","childName","nameComponent","Child2Demo3","handleChangeContent","ParentDemo3","useState","setName","content","setContent","useCallback","Date","getTime","useMemo","arr1","Array","from","k","index","label","arr2","key","uuidv4","ParentDemo4","map","i","ClassComponent","value","x","document","querySelector","textContent","handleClickAsync","setTimeout","handleMergeClick","className","style","marginTop","FunctionComponent","App","IntegerList","numbers","it","idx","display","textAlign","width","fill","Math","floor","random","sort","a","b","setNumbers","showInput","setShowInput","inputValue","setInputValue","placeholder","marginRight","onChange","v","target","renderOnce","CompA","cnt","setCnt","useEffect","timer","window","setInterval","clearInterval","CompB","CompD","Normal","ValueCtx","createContext","CtxContainer","children","Provider","PubSubCommunicate","ErrorBoundary","props","hasError","error","info","Comp","lazy","Promise","resolve","reject","marginBottom","fallback","comp","Row","Example","height","itemCount","itemSize","BasicExample","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fd33ff4f.chunk.js","sourcesContent":["import React, { Fragment,Component,PureComponent,memo } from \"react\";\r\n\r\n\r\n\r\n// PureComponent、React.memo   浅比较减少子组件 重复 render \r\n\r\n\r\nconst  FunctionDemo1=memo(()=> {\r\n     console.log('FunctionDemo1  渲染了')\r\n    return (\r\n      <div>\r\n        <h2>FunctionDemo1</h2>\r\n      </div>\r\n    );\r\n  });\r\n\r\n\r\n\r\n  const  MemoFunctionDemo1=()=> {\r\n    console.log('MemoFunctionDemo1  渲染了')\r\n   return (\r\n     <div>\r\n       <h2>MemoFunctionDemo1</h2>\r\n     </div>\r\n   );\r\n };\r\n\r\n\r\n\r\n\r\n//   class ChildDemo1 extends PureComponent{\r\n    class ChildDemo1 extends Component{\r\n\r\n\r\n        render(){\r\n           console.log('childDemo1  渲染了')\r\n\r\n             return(\r\n                 <Fragment>\r\n                     childDemo1\r\n                 </Fragment>\r\n             )\r\n\r\n        }\r\n\r\n  }\r\n\r\n\r\n\r\n  class ClassDemo1 extends Component {\r\n      \r\n      state={\r\n          name:'classDemo1'\r\n      }\r\n\r\n       handleClick=()=>{\r\n           this.setState({\r\n               name:'classDemo1'\r\n           })\r\n       }\r\n\r\n\r\n\r\n    render(){\r\n      const {name} = this.state;\r\n   return ( <>\r\n        <h1>{name}</h1> \r\n        <button onClick={this.handleClick}>点击刷新</button>\r\n        \r\n        <ChildDemo1/>\r\n        <FunctionDemo1/>\r\n\r\n        {/* <MemoFunctionDemo1/> */}\r\n\r\n       </>)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  export  default   ClassDemo1;\r\n\r\n  ","import React,{Component,Fragment} from \"react\";\r\nimport _ from 'lodash';\r\nimport  Immutable from 'immutable'\r\n\r\n\r\n//immutable是一种持久化数据。一旦被创建就不会被修改。修改Immutable对象的时候返回新的Immutable。但是原数据不会改变。\r\n\r\n\r\n// shouldComponentUpdate\r\n\r\n\r\n\r\n\r\n\r\n    class Child1Demo2 extends Component{\r\n\r\n     state={\r\n         someData:{name:'apple'},\r\n         otherData:Date.now(),\r\n    }\r\n\r\n        \r\n        shouldComponentUpdate(nextProps,nextState){\r\n            \r\n            if(!_.isEqual(nextProps,this.props)|| !_.isEqual(nextState,this.state) ){\r\n                 return true\r\n            }\r\n\r\n             if(nextState.otherData!==this.state.otherData){\r\n                    return true\r\n            }\r\n\r\n\r\n               return false \r\n        }\r\n\r\n        handleClick=()=>{\r\n            this.setState({\r\n                someData:{name:'apple1'},\r\n                 otherData:Date.now(),\r\n\r\n            })\r\n        }\r\n\r\n\r\n        render(){\r\n           console.log('child1Demo2  渲染了')\r\n\r\n             return(\r\n                 <Fragment>\r\n                     <button onClick={this.handleClick} > child1Demo2 </button> \r\n                 </Fragment>\r\n             )\r\n        }\r\n  }\r\n\r\n\r\n  class Child2Demo2 extends Component{\r\n    state = {\r\n           someData: Immutable.fromJS({  name:\"Apple\"})\r\n        }\r\n    \r\n      shouldComponentUpdate(nextProps,nextState){\r\n          if(!Immutable.is(nextState.someData,this.state.someData)){  return true }\r\n           return false ;\r\n         }\r\n\r\n   handleClick=()=>{\r\n       // const someData= this.state.someData.set('name','apple2')\r\n        const someData= this.state.someData.set('name','Apple')\r\n         this.setState({\r\n                    someData,\r\n                })\r\n            }\r\n            render(){\r\n               console.log('child2Demo2  渲染了')\r\n                 return(\r\n                     <Fragment>\r\n                        <button onClick={this.handleClick} > child2Demo2 </button> \r\n                     </Fragment>\r\n                 )\r\n            }\r\n      }\r\n\r\n export default class ParentClassDemo2 extends Component {\r\n      \r\n    state={\r\n        name:'classDemo2'\r\n    }\r\n\r\n  render(){\r\n    const {name} = this.state;\r\n    return ( <>\r\n      <h1>{name}</h1> \r\n      \r\n\r\n      {/* <Child1Demo2 /> */}\r\n       <Child2Demo2/>\r\n\r\n   {/* <A data=\"{data}\">\r\n       B 组件只使用了 data.a 和 data.b \r\n\r\n  <B data=\"{data}\">\r\n    C 组件只使用了 data.a   之后再用了 data.c\r\n    <C data=\"{data}\" />\r\n  </B>\r\n</A>\r\n       */}\r\n\r\n     </>)\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React,{useState,useMemo} from \"react\";\r\n\r\n\r\nconst renderCntMap = {};\r\n\r\n //useMemo、useCallback 实现稳定的 Props 值\r\n\r\n\r\n // useMemo 减少组件 Render 过程耗时    ，\r\n // 当它的依赖未发生改变时，就不会触发重新计算。一般用在「计算派生状态的代码」非常耗时的场景中，\r\n  // 如：遍历大列表做统计信息。  多次缓存 可参考  memoizee  \r\n\r\n\r\n\r\n const Child1Demo3 = React.memo(({otherName,childName})=>{\r\n     \r\n\r\n    renderCntMap[childName] = (renderCntMap[childName] || 0) + 1\r\n     console.log(renderCntMap.nameComponent);\r\n\r\n    console.log(`name 子组件  渲染le`)\r\n  return (\r\n  <>\r\n  <br/>\r\n   {otherName}\r\n   <br/>\r\n   {childName} Render 次数：{renderCntMap[childName]}\r\n  </>)\r\n\r\n   });\r\n\r\n\r\n   const Child2Demo3 = React.memo(({handleChangeContent,childName})=>{\r\n\r\n    renderCntMap[childName] = (renderCntMap[childName] || 0) + 1\r\n    console.log(`content  子组件  渲染了`);\r\n\r\n  return (\r\n  <>\r\n  <br/>\r\n  <br/>\r\n  <br/>\r\n  <br/>\r\n   <button onClick={handleChangeContent}>刷新content</button>\r\n   <br/>\r\n\r\n   {childName} Render 次数：{renderCntMap[childName]}\r\n  </>)\r\n\r\n   });\r\n\r\n\r\n\r\n function ParentDemo3() {\r\n\r\n    const [name, setName] = useState('名称');\r\n   const [content,setContent] = useState('内容');\r\n\r\n    const changeName=()=>{\r\n        setName(new Date().getTime())\r\n    };\r\n\r\n    const  changeContent=()=>{\r\n        setContent(new Date().getTime())\r\n    }\r\n\r\n    const handleChangeContent = React.useCallback(()=>{\r\n        setContent(new Date().getTime())\r\n    },[content])\r\n\r\n\r\n    const otherName =  useMemo(()=>{\r\n        return `name:${name},content:${content}`  // \r\n    },[name]);\r\n\r\n\r\n  return (\r\n      <>\r\n        <button onClick={changeName }>name</button>\r\n        <button onClick={changeContent}>content</button>\r\n        <Child1Demo3 otherName={otherName}  childName={'nameComponent'}  /> \r\n        <Child2Demo3 handleChangeContent={handleChangeContent}  childName={'contentComponent'}  /> \r\n      </>\r\n  )\r\n}\r\n\r\n\r\n  export default  ParentDemo3","\r\nimport React from \"react\";\r\nimport  {v4 as uuidv4} from 'uuid';\r\n\r\n\r\n//列表项使用 key 属性 \r\n\r\nconst size=10000;\r\nconst arr1 = Array.from(Array(size),(k,index)=>({label:1+index,}));\r\n\r\nconst arr2 =  Array.from(Array(size),(k,index)=>({label:1+index,key:uuidv4(),})); \r\n\r\nfunction ParentDemo4() {\r\n\r\n\r\n   console.log(arr1);\r\n   console.log(arr2);\r\n\r\n return (\r\n     <>\r\n      {/* diff  过程  出现先后顺序，两次更新，一次创建 */}\r\n      \r\n     <h2>  列表未添加 key: </h2>\r\n      <ul>\r\n        {arr1.map(i=><li>{i.label}</li>)}\r\n     </ul>\r\n\r\n\r\n     <h2> 列表添加 key: </h2>\r\n     <ul>\r\n       {arr2.map(i=><li key={i.key}>{i.label}</li>)}\r\n     </ul>\r\n\r\n\r\n     \r\n\r\n\r\n\r\n\r\n\r\n\r\n {/* 使用唯一且稳定key diff  过程  创建 key 值为 2014 的虚拟 DOM。*/}\r\n {/* 相比于不使用 key 的代码，使用 key 节省了两次 DOM 更新操作。如果把例子中的 <li> 换成自定义组件，并且自定义组件使用了 PureComponent 或 React.memo 优化。 */}\r\n\r\n\r\n{/* <!-- 前一次 Render 结果 --> */}\r\n<ul>\r\n  <li key=\"2015\">Duke</li>\r\n  <li key=\"2016\">Villanova</li>\r\n</ul>\r\n\r\n{/* <!-- 新的 Render 结果 --> */}\r\n<ul>\r\n  <li key=\"2014\">Connecticut</li>\r\n  <li key=\"2015\">Duke</li>\r\n  <li key=\"2016\">Villanova</li>\r\n</ul>\r\n\r\n\r\n     </>\r\n )\r\n\r\n }\r\n\r\n\r\n\r\n \r\n export default  ParentDemo4","\r\n import React ,{ Component, useState }  from 'react';\r\n   // 批量更新，减少 Render 次数\r\n\r\n   // React 类组件中 setState 是同步的还是异步的？\r\n\r\n   \r\n class ClassComponent extends Component {\r\n     state = {\r\n       value: 0,\r\n       x:0,\r\n     };\r\n   \r\n     // 该函数直接赋值给 onClick 回调，\r\n     // 则属于 React 默认进行批处理更新的场景\r\n     // 执行 setState 后不会更新 this.state 值，\r\n     // 所以两次输出值相等\r\n     handleClick = () => {\r\n       console.log(\"==========开始执行 handleClick =========\");\r\n       console.log(\"执行前值为：\", this.state.value);\r\n       this.setState({ value: this.state.value + 1 });\r\n       console.log(\"执行 setState 后值为：\", this.state.value);\r\n       console.log(\r\n         \"执行完 setState 后，DOM 中值为：\",\r\n         document.querySelector(\".classValue\").textContent\r\n       );\r\n     };\r\n   \r\n     // 这个函数给 onClick。加上了 setTimeout，使其成为异步执行\r\n     // 不属于 React 默认进行批处理更新的场景\r\n     // 执行 setState 后会立即出发组件更新流程\r\n     // 等组件更新流程执行完后，\r\n     // 才会回到 handleClick 继续执行后面的打印语句\r\n     // 所以两次输出值相等\r\n   \r\n     // 注意到：DOM 值也是更新了的，说明提交阶段也被执行了。\r\n     handleClickAsync = () => {\r\n       setTimeout(() => {\r\n         this.handleClick();\r\n       });\r\n     };\r\n\r\n     handleMergeClick=()=>{\r\n        this.setState({x: 1});\r\n        this.setState({x: 2});\r\n        this.setState({x: 3});\r\n        console.log('x3',this.state.x);\r\n        \r\n        setTimeout(() => {\r\n            this.setState({x: 4})\r\n            this.setState({x: 5})\r\n            this.setState({x: 6})\r\n            console.log(this.state.x);\r\n\r\n\r\n            // ReactDOM.unstable_batchedUpdates(() => {\r\n            //     this.setState({x: 4})\r\n            //     this.setState({x: 5})\r\n            //     this.setState({x: 6})\r\n            //     console.log(this.state.x);\r\n\r\n            // })\r\n        }, 0)\r\n     }\r\n   \r\n     render() {\r\n       return (\r\n         <div>\r\n           <fieldset>\r\n             <legend>类组件</legend>\r\n             当前值：<span className=\"classValue\">{this.state.value}</span>\r\n             <div style={{ marginTop: 20 }}>\r\n               <button onClick={this.handleClick}>在回调函数中同步执行</button>\r\n               <div style={{ marginTop: 20 }}>\r\n                 <button onClick={this.handleClickAsync}>\r\n                   在回调函数中异步执行\r\n                 </button>\r\n               </div>\r\n             </div>\r\n\r\n\r\n             <div style={{ marginTop: 20 }}>\r\n                 <button onClick={this.handleMergeClick}>\r\n                 合并操作\r\n                 </button>\r\n               </div>\r\n           </fieldset>\r\n         </div>\r\n       );\r\n     }\r\n   };\r\n\r\n   function FunctionComponent() {\r\n    const [state, setState] = useState(0);\r\n  \r\n    /**\r\n     * 函数中的 state 都是闭包引用的，所以一直都是旧值。\r\n     *\r\n     * 但 handleClick 中 DOM 中的值是旧值。\r\n     * 而 handleClickAsync 中 DOM 中的值是新值。\r\n     * */\r\n    const handleClick = () => {\r\n      console.log(\"==========开始执行 handleClick =========\");\r\n      console.log(\"执行前值为：\", state);\r\n      setState(state + 1);\r\n      console.log(\"执行 setState 后值为：\", state);\r\n      console.log(\r\n        \"执行完 setState 后，DOM 中值为：\",\r\n        document.querySelector(\".functionValue\").textContent\r\n      );\r\n    };\r\n  \r\n    const handleClickAsync = () => {\r\n      setTimeout(handleClick);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <fieldset>\r\n          <legend>函数组件</legend>\r\n          当前值：<span className=\"functionValue\">{state}</span>\r\n          <div style={{ marginTop: 20 }}>\r\n            <button onClick={handleClick}>在回调函数中同步执行</button>\r\n            <div style={{ marginTop: 20 }}>\r\n              <button onClick={handleClickAsync}>在回调函数中异步执行</button>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n   \r\n   export default function App() {\r\n     return (\r\n       <div className=\"App\">\r\n         <ClassComponent />\r\n   \r\n         <div style={{ marginTop: 20 }}></div>\r\n   \r\n         <FunctionComponent />\r\n       </div>\r\n     );\r\n   }\r\n   \r\n\r\n\r\n  /*\r\n   在 React 管理的事件回调和生命周期中，setState 是异步的，\r\n   而其他时候 setState 都是同步的。\r\n   这个问题根本原因就是 React 在自己管理的事件回调和生命周期中，\r\n   对于 setState 是批量更新的，而在其他时候是立即更新的。\r\n   */\r\n\r\n  //React没有控制权的情况有很多： setTimeout 、 Promise.then(fn), fetch回调，xhr网络回调等等。\r\n\r\n    \r\n","import { memo, useState } from \"react\";\r\n\r\n/*\r\n按优先级更新，及时响应用户\r\n实现优先级更新的要点是将耗时任务移动到下一个宏任务中执行，优先响应用户行为。\r\n*/\r\n\r\n\r\nfunction getDefaultNumbers() {\r\n  const total = 50000;\r\n  return new Array(total)\r\n    .fill(0)\r\n    .map((it) => Math.floor(Math.random() * total))\r\n    .sort((a, b) => a - b);\r\n}\r\n\r\nconst IntegerList = memo(({ numbers }) => {\r\n  console.log(\"render IntegerList\");\r\n  return (\r\n    <div>\r\n      {numbers.map((it, idx) => (\r\n        <span\r\n          key={idx}\r\n          style={{\r\n            display: \"inline-block\",\r\n            textAlign: \"center\",\r\n            width: \"60px\"\r\n          }}\r\n        >\r\n          {it}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default function App() {\r\n  const [numbers, setNumbers] = useState(getDefaultNumbers());\r\n  const [showInput, setShowInput] = useState(false);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const slowHandle = () => {\r\n    setShowInput(false);\r\n    setNumbers([...numbers, +inputValue].sort((a, b) => a - b));\r\n  };\r\n  const fastHandle = () => {\r\n    setShowInput(false);\r\n    // 异步下次操作，需要放在下次宏任务中\r\n    setTimeout(() => {\r\n      setNumbers([...numbers, +inputValue].sort((a, b) => a - b));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {showInput ? (\r\n        <div>\r\n          <input\r\n            placeholder=\"输入整数\"\r\n            style={{ marginRight: 20 }}\r\n            value={inputValue}\r\n            onChange={(v) => setInputValue(v.target.value)}\r\n          ></input>\r\n          <br />\r\n          <button onClick={slowHandle} style={{ marginTop: 8 }}>\r\n            点击我添加该整数，页面卡顿，不会立即反馈给用户结果\r\n          </button>\r\n          <br />\r\n          <button onClick={fastHandle} style={{ marginTop: 8 }}>\r\n            点击我添加该整数，输入框立即消失，立即反馈给用户页面响应\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <button onClick={() => setShowInput(true)}>点我添加一个整数</button>\r\n      )}\r\n      <IntegerList numbers={numbers}></IntegerList>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect, memo } from \"react\";\r\n\r\nconst renderCntMap = {};\r\nconst renderOnce = (name) => {\r\n  return (renderCntMap[name] = (renderCntMap[name] || 0) + 1);\r\n};\r\n\r\nfunction CompA() {\r\n  const [cnt, setCnt] = useState(0);\r\n  useEffect(() => {\r\n    const timer = window.setInterval(() => {\r\n      setCnt((v) => v + 1);\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, [setCnt]);\r\n\r\n  return (\r\n    <div>\r\n      组件 CompA Render 次数：{renderOnce(\"CompA\")}\r\n      <CompB cnt={cnt} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CompB = memo(function CompB({ cnt }) {\r\n  // B 组件不是用 cnt，只作为数据透传\r\n  return (\r\n    <div>\r\n      组件 CompB Render 次数：{renderOnce(\"CompB\")}\r\n      <CompD cnt={cnt} />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst CompD = memo(function ({ cnt }) {\r\n  // D 组件内使用 cnt\r\n  return <div>组件 CompD Render 次数：{renderOnce(\"CompD\")}</div>;\r\n});\r\n\r\nexport const Normal = () => {\r\n  return (\r\n    <div>\r\n      <h1>待优化场景</h1>\r\n      <div>将状态提升至最低公共祖先。</div>\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        每次状态更新时，父组件和各个子组件都会执行 Render 过程。\r\n      </div>\r\n\r\n      <div style={{ marginTop: \"40px\" }}>\r\n        父组件 Render 次数：{renderOnce(\"parent\")}\r\n      </div>\r\n      <CompA />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Normal;\r\n","import { useState, useEffect, createContext,  memo } from \"react\";\r\n\r\nconst renderCntMap = {};\r\nconst renderOnce = (name) => {\r\n  return (renderCntMap[name] = (renderCntMap[name] || 0) + 1);\r\n};\r\n\r\n// 将需要公共访问的部分移动到 Context 中进行优化\r\n// Context.Provider 就是发布者\r\n// Context.Consumer 就是消费者\r\nconst ValueCtx = createContext();\r\nconst CtxContainer = ({ children }) => {\r\n  const [cnt, setCnt] = useState(0);\r\n  useEffect(() => {\r\n    const timer = window.setInterval(() => {\r\n      setCnt((v) => v + 1);\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, [setCnt]);\r\n\r\n  return <ValueCtx.Provider value={cnt}>{children}</ValueCtx.Provider>;\r\n};\r\n\r\nfunction CompA() {\r\n\r\n  // 组件内使用 cnt\r\n  return (\r\n    <div>\r\n      组件 CompA Render 次数：{renderOnce(\"CompA\")}\r\n      <CompB />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CompB = memo(function CompB() {\r\n  // B 组件不使用 cnt，\r\n  // 只将数据透传给组件 D\r\n  return (\r\n    <div>\r\n      组件 CompB Render 次数：{renderOnce(\"CompB\")}\r\n      <CompD />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst CompD = memo(function () {\r\n  // 组件D使用 cnt\r\n  return <div>组件 CompD Render 次数：{renderOnce(\"CompD\")}</div>;\r\n});\r\n\r\nexport const PubSubCommunicate = () => {\r\n  return (\r\n    <CtxContainer>\r\n      <div>\r\n        <h1>优化后场景</h1>\r\n        <div>\r\n          将状态提升至最低公共祖先的上层，用 CtxContainer 将其内容包裹。\r\n        </div>\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          每次状态更新时，只有组件A和组件B会再次执行 Render 过程。\r\n        </div>\r\n\r\n        <div style={{ marginTop: \"40px\" }}>\r\n          父组件 Render 次数：{renderOnce(\"parent\")}\r\n        </div>\r\n        <CompA />\r\n      </div>\r\n    </CtxContainer>\r\n  );\r\n};\r\n\r\nexport default PubSubCommunicate;\r\n","import { Normal } from \"./child1Demo7\";\r\nimport { PubSubCommunicate } from \"./child2Demo7\";\r\n\r\n/*\r\n发布者订阅者跳过中间组件 Render 过程\r\n*/\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>背景</h1>\r\n      <div>\r\n        用发布者订阅者解决数据透传。\r\n        <br />\r\n        例如：组件A和组件D使用组件A中的状态，而组件B只负责将状态从 A 传给 D。\r\n      </div>\r\n\r\n      <div\r\n        style={{ display: \"inline-block\", width: \"40%\", marginRight: \"20px\" }}\r\n      >\r\n        <Normal />\r\n      </div>\r\n      <div style={{ display: \"inline-block\", width: \"40%\" }}>\r\n        <PubSubCommunicate />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { lazy, Suspense, Component } from 'react';\r\n  \r\n/* 懒加载  在 SPA 中，懒加载优化一般用于从一个路由跳转到另一个路由。\r\n还可用于用户操作后才展示的复杂组件，比如点击按钮后展示的弹窗模块（有时候弹窗就是一个复杂页面 😌）。\r\n*/\r\n\r\n// 对加载失败进行容错处理\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true }\r\n  }\r\n\r\n  \r\n  componentDidCatch(error, info) {\r\n    // You can also log the error to an error reporting service\r\n    // logErrorToMyService(error, info);\r\n    console.log(error);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>这里处理出错场景</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nconst Comp = lazy(() => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (Math.random() > 0.5) {\r\n        reject('模拟网络出错')\r\n      } else {\r\n        resolve(import('./demo1.jsx'))\r\n      }\r\n    }, 2000)\r\n  })\r\n})\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ marginBottom: 20 }}>\r\n        实现懒加载优化时，不仅要考虑加载态，还需要对加载失败进行容错处理。\r\n      </div>\r\n      <ErrorBoundary>\r\n        <Suspense fallback=\"Loading...\">\r\n          <Comp />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n    </div>\r\n  )\r\n}","import { useEffect, useMemo, useState } from 'react';\r\n\r\n// useMemo 返回虚拟 DOM 可跳过该组件 Render 过程\r\n\r\n\r\n\r\nconst renderCntMap = {}\r\n\r\nfunction Comp({ name }) {\r\n  renderCntMap[name] = (renderCntMap[name] || 0) + 1\r\n  return (\r\n    <div>\r\n      组件「\r\n      {name}」 Render 次数：\r\n      {renderCntMap[name]}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  const setCnt = useState(0)[1]\r\n  useEffect(\r\n    () => {\r\n      const timer = window.setInterval(() => {\r\n        setCnt(v => v + 1)\r\n      }, 1000)\r\n      return () => clearInterval(timer)\r\n    },\r\n    [setCnt]\r\n  )\r\n\r\n  const comp = useMemo(() => {\r\n    return <Comp name=\"使用 useMemo 作为 children\" />\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <h2>useMemo 返回虚拟 DOM 可跳过该组件 Render 过程</h2>\r\n      <Comp name=\"直接作为 children\" />\r\n      {comp}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { FixedSizeList as List } from 'react-window';\r\n\r\n  /* 使用 react-window 很简单，只需要计算每项的高度即可。下面代码中每一项的高度是 35px。\r\n        如果每项的高度是变化的，可给 itemSize 参数传一个函数 \r\n         用于一次性渲染大量的数据\r\n  */\r\n\r\n\r\nconst Row = ({ index, style }) => (\r\n  <div className={index % 2 ? 'ListItemOdd' : 'ListItemEven'} style={style}>\r\n    Row {index}\r\n  </div>\r\n);\r\n\r\nconst Example = () => (\r\n  <List\r\n    className=\"List\"\r\n    height={150}\r\n    itemCount={10000}\r\n    itemSize={35}\r\n    width={300}\r\n  >\r\n    {Row}\r\n  </List>\r\n);\r\nexport default   Example;","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport ClassDemo1 from './demo1';\nimport Demo2 from './demo2';\nimport Demo3 from './demo3';\nimport ClassDemo4 from './demo4';\nimport ClassDemo5 from './demo5';\nimport ClassDemo6 from './demo6';\nimport ClassDemo7 from './demo7';\nimport ClassDemo8 from './demo8';\nimport ClassDemo9 from './demo9';\nimport ClassDemo10 from './demo10';\n\n\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function BasicExample() {\n  return (\n    <Router>\n      <div>\n        <ul>\n         \n          <li>\n            <Link to=\"/classDemo1\">demo1  PureComponent、React.memo浅比较优化 </Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo2\">demo2 shouldComponentUpdate手动优化</Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo3\">demo3 useMemo、useCallback 实现稳定的 Props 值</Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo4\">demo4 列表项使用 key 属性</Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo5\">demo5  批量更新，减少 Render 次数 </Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo6\">demo6 按优先级更新，及时响应用户</Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo7\">demo7 发布者订阅者跳过中间组件 Render 过程</Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo8\">demo8 懒加载</Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo9\">demo9  useMemo 返回虚拟 DOM 可跳过该组件 Render 过程</Link>\n          </li>\n          <li>\n            <Link to=\"/classDemo10\">Demo10 长列表</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        <Switch>\n         <Route exact path=\"/classDemo1\" >\n         <ClassDemo1/>\n         </Route>\n          <Route  exact path=\"/classDemo2\"  >\n          <Demo2/>\n          </Route>\n          <Route  exact  path=\"/classDemo3\" >\n          <Demo3/>\n          </Route>\n          <Route  exact  path=\"/classDemo4\" >\n          <ClassDemo4/>\n          </Route>\n          <Route  exact  path=\"/classDemo5\" >\n            <ClassDemo5/>\n          </Route>\n          <Route  exact  path=\"/classDemo6\" >\n            <ClassDemo6/>\n          </Route>\n          <Route  exact  path=\"/classDemo7\" >\n            <ClassDemo7/>\n          </Route>\n          <Route  exact  path=\"/classDemo8\" >\n            <ClassDemo8/>\n          </Route>\n          <Route  exact  path=\"/classDemo9\" >\n            <ClassDemo9/>\n          </Route>\n          <Route  exact  path=\"/classDemo10\" >\n            <ClassDemo10/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'intersection-observer';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  //  {/* </React.StrictMode> */}\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}